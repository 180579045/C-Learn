<Window x:Class="WPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF"
        xmlns:vm="clr-namespace:WPF.ViewModel"
        xmlns:model="clr-namespace:WPF.Model"
        xmlns:localui="clr-namespace:WPF.UserControlTemplate"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="MainWindow" Height="800" Width="1000" WindowStartupLocation="CenterScreen">

    <Window.Resources>

        <!-- 控件模板，可以自由进行组合 -->
        <ControlTemplate x:Key="cTmp">
            <StackPanel>
                <TextBox x:Name="textBox1" Margin="6"/>
                <TextBox x:Name="textBox2" Margin="6,0"/>
                <TextBox x:Name="textBox3" Margin="6"/>
            </StackPanel>
        </ControlTemplate>

        <!-- 一个在XAML当中用到的string实例 -->
        <sys:String x:Key="BindingStatic">关联静态资源以及圆角Style</sys:String>

        <!-- 后边树形结构用到的数据 -->
        <XmlDataProvider x:Key="xdp" XPath="FileSystem/Folder">
            <x:XData>
                <FileSystem xmlns="">
                    <Folder Name="Books">
                        <Folder Name="Programming">
                            <Folder Name="Windows">
                                <Folder Name="WPF"/>
                                <Folder Name="MFC"/>
                                <Folder Name="Delphi"/>
                            </Folder>
                        </Folder>
                        <Folder Name="Tools">
                            <Folder Name="Development"/>
                            <Folder Name="Designment"/>
                            <Folder Name="Players"/>
                        </Folder>
                    </Folder>
                </FileSystem>
            </x:XData>
        </XmlDataProvider>

    </Window.Resources>

    <Grid>
        <TabControl>
            <!-- 主要用来展示纯前端的处理 -->
            <TabItem Header="纯前端处理">
                <Grid>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="300"></ColumnDefinition>
                        <ColumnDefinition Width="300"></ColumnDefinition>
                    </Grid.ColumnDefinitions>

                    <DockPanel Grid.Column="0" Margin="10,0,10,0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="150"></RowDefinition>
                                <RowDefinition Height="120"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                            </Grid.RowDefinitions>

                            <!-- 使用Style对控件进行定制化，即所谓的CSS和Javascript -->
                            <Border Grid.Row="0" BorderBrush="Black" BorderThickness="1">
                                <StackPanel  Margin="3,3,3,3">
                                    <Label>Style的用法:</Label>
                                    <Button Style="{StaticResource BlueButton}" Margin="0,5">蓝色按钮</Button>
                                    <Button Style="{StaticResource ButtonTrigger}">蓝色按钮和触发事件</Button>
                                </StackPanel>
                            </Border>

                            <!-- WPF还支持画线，画图 -->
                            <Border Grid.Row="1" BorderBrush="Black" BorderThickness="1" Margin="0,5">
                                <StackPanel  Margin="3,3,3,3">
                                    <Label>用WPF画图</Label>
                                    <Canvas x:Name="canvas1"></Canvas>
                                </StackPanel>
                            </Border>

                            <!-- 使用controlTemplate组合一个控件出来 -->
                            <Border Grid.Row="2" BorderBrush="Black" BorderThickness="1" Margin="0,5">
                                <StackPanel>
                                    <Label>在前端直接用ControlTemplate组合用户控件</Label>
                                    <UserControl x:Name="uc" Template="{StaticResource cTmp}" Grid.Row="2"/>
                                </StackPanel>
                            </Border>

                            <!-- 可以使用Binding关联一个静态Source，既然是静态Source，Path就使用.来代替（因为不用指定属性） -->
                            <TextBox x:Name="tb" Text="{Binding Path=., Source={StaticResource ResourceKey=BindingStatic}}"  Style="{StaticResource tbstyle}" Grid.Row="3"/>

                            <!-- 也可以使用Binding关联其他控件的属性 -->
                            <Border  Grid.Row="4" BorderBrush="Black" BorderThickness="1" Margin="0,5">
                                <StackPanel>
                                    <Label>控件绑定前端元素：</Label>
                                    <TextBox Text="{Binding ElementName=slider1, Path=Value, Mode=OneWay}"></TextBox>
                                    <Slider x:Name="slider1" Maximum="20"></Slider>
                                </StackPanel>
                            </Border>

                        </Grid>

                    </DockPanel>

                    <DockPanel Grid.Column="1">



                    </DockPanel>

                </Grid>
            </TabItem>

            <TabItem Header="各类控件的使用">

                <Grid>

                    <!-- 总宽度1000 -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"/>
                        <ColumnDefinition Width="500"/>
                        <ColumnDefinition Width="300"/>
                    </Grid.ColumnDefinitions>

                    <!-- 总高度800 -->
                    <Grid Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="120"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="100"/>
                        </Grid.RowDefinitions>
                        
                        <!-- 
                            在此使用DataContext指定一个ClassA的一个实例，
                            并且在该区域内的所有控件都能访问这个类实例的属性 
                        -->
                        <Border  BorderBrush="Black" BorderThickness="1" Grid.Row="0" Margin="5,5,5,5">
                            <!-- 在Border范围内实例化了一个ClassA，名为class_a -->
                            <Border.DataContext>
                                <local:ClassA x:Name="class_a"></local:ClassA>
                            </Border.DataContext>

                            <!-- 指定了DataContext后，可以通过Binding的path关联实例对应的属性 -->
                            <TreeView Name="tree">
                                <TreeViewItem Header="Root">
                                    <TreeViewItem Header="{Binding Path = m_A}"></TreeViewItem>
                                    <TreeViewItem Header="{Binding m_B}"></TreeViewItem>
                                </TreeViewItem>
                            </TreeView>
                        </Border>

                        <!-- 有关于ItemsControl（ListBox）类型的控件，使用ItemSource进行Binding -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="1" Margin="5,5,5,5">
                            <StackPanel Margin="3,3,3,3">
                                <Label>绑定ItemControl类型的控件</Label>
                                <!-- 显示下边ListBox选择的PersonID -->
                                <TextBox x:Name="PersonID"></TextBox>
                                <!-- 关联ItemSource为一个List<person>容器的列表 -->
                                <ListBox x:Name="PersonList" Margin="0,5"></ListBox>
                            </StackPanel>
                        </Border>

                        <!-- 有关于ItemsControl(ListBox)控件，使用一个List<Person>绑定 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="2" Margin="5,5,5,5" >
                            <StackPanel>
                                <!-- 每个控件都有自己的DataContext
                                     DataContext可以指定为某一个区域 
                                     这样使用DataContext，也相当于实例化了一个Student对象
                                -->
                                <StackPanel.DataContext>
                                    <local:Student x:Name="stus"></local:Student>
                                </StackPanel.DataContext>
                                <ListBox x:Name="StuList" ItemsSource="{Binding m_StuList}" DisplayMemberPath="m_Name"></ListBox>
                            </StackPanel>
                        </Border>

                        <!-- 一个实时更新的输入框，绑定函数返回值的例子 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="3" Margin="5,5,5,5" >
                            <StackPanel>
                                <TextBox x:Name="CalcX"></TextBox>
                                <TextBox x:Name="CalcY"></TextBox>
                                <TextBox x:Name="CalcRes"></TextBox>
                            </StackPanel>
                        </Border>

                        <!-- 这个是学习依赖属性用的，DP暂时没学透彻呢 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="4" Margin="5,5,5,5">
                            <StackPanel>
                                <TextBox x:Name="text1"></TextBox>
                                <Button Content="获取输入框内容" Click="GetDepProperty" ></Button>
                            </StackPanel>
                        </Border>

                    </Grid>

                    <!-- 这一列涉及控件DataGrid的使用方法 -->
                    <Grid Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="120"/>
                            <RowDefinition Height="120"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="150"/>
                        </Grid.RowDefinitions>

                        <Label Grid.Row="0">这是一个DataGrid最基础的实例</Label>
                        <!-- 在MSDN中，一个最为基础的DataGrid的使用方法 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="1" Margin="5,5,5,5">
                            <DataGrid x:Name="CustomerDataGrid" ItemsSource="{Binding Path = .}" AutoGenerateColumns="False"  >
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Column1"  Binding="{Binding FirstName}"/>
                                    <DataGridTextColumn Header="Column2" Binding="{Binding LastName}" />
                                    <DataGridHyperlinkColumn Header="Column3" Binding="{Binding Email}"  />
                                    <DataGridCheckBoxColumn Header="Column4" Binding="{Binding IsMember}" />
                                    <DataGridTextColumn Header="Column5" Binding="{Binding cell.name}" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </Border>

                        <Label Grid.Row="0">这是一个带有多个事件的DataGrid</Label>
                        <!-- 对DataGrid进行更加丰富的操作，比如单元格编辑事件等等 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="3" Margin="5,5,5,5">
                            <DataGrid x:Name="CustomerDataGrid_AddEvent" ItemsSource="{Binding Path = .}" AutoGenerateColumns="False" SelectionUnit="Cell" SelectionMode="Single">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Column1"  Binding="{Binding column1.name}"/>
                                    <DataGridHyperlinkColumn Header="Column2" Binding="{Binding column2.name}"  />
                                    <DataGridCheckBoxColumn Header="Column3" Binding="{Binding column3.name}" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </Border>

                        <!-- 触发单元格自动刷新 -->
                        <StackPanel Grid.Row="4">
                            <Label>以下使用了数据模板为DataGrid丰富内容，并实现自动刷新功能</Label>
                            <Button Click="Button_Click">开始刷新DataGrid</Button>
                        </StackPanel>
                        
                        <!-- 使用DataTemplate对.NET自带的DataGrid进行定制化 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="5" Margin="5,5,5,5">
                            <!-- 一个数据模板，使用在后边DataGrid的最后一个单元格 -->
                            <Border.Resources>
                                <DataTemplate x:Key="cellEditingTemplate" DataType="{x:Type model:MessageModel}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="15"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Text="{Binding m_content}"/>
                                        <Button Grid.Column="1" Content="..." Command="{Binding ShowCommand}"/>
                                    </Grid>
                                </DataTemplate>

                                <DataTemplate x:Key="cellDropBox" DataType="{x:Type model:MessageModel}">
                                    <ComboBox ItemsSource="{Binding m_content_detail}" SelectedIndex="0" />
                                </DataTemplate>
                            </Border.Resources>

                            <!-- 表格，用来显示MessageVM中所有的消息,使用ItemsSource指定数据源 -->
                            <DataGrid AutoGenerateColumns="False" x:Name="MsgDataGrid" ItemsSource="{Binding Path=.}" BeginningEdit="MsgDataGrid_BeginningEdit" >
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="编号" Binding="{Binding m_No}"/>
                                    <DataGridTextColumn Header="时间戳" Binding="{Binding m_time}"/>
                                    <DataGridTemplateColumn Header="消息内容" CellTemplate="{StaticResource ResourceKey = cellEditingTemplate}" 
                                                            CellEditingTemplate="{StaticResource ResourceKey = cellEditingTemplate}"/>
                                    <DataGridTemplateColumn Header="消息详情" CellTemplate="{StaticResource ResourceKey=cellDropBox}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Border>

                        <!-- 表格，和上边的表格一样，但是只是应用了usercontrol封装了一下 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="6" Margin="5,5,5,5">
                            <localui:MessageDataGrid x:Name="MsgDataGrid2"></localui:MessageDataGrid>
                        </Border>

                        <!-- 
                             这是一个使用Dynamic动态类型关联的DataGrid，
                             这样一来，如果有非常多的同类型的表格，就不用为每个表格再去手工建立数据模型了
                        -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="7" Margin="5,5,5,5">
                            <DataGrid AutoGenerateColumns="False" x:Name="MsgDataGrid_AutoGenCol"/>
                        </Border>

                        <ScrollViewer Grid.Row="8">
                            <Label x:Name="ReceiveDataLabel" Content="在此接收DataGrid拖拽过来的数值"></Label>
                        </ScrollViewer>

                    </Grid>

                    <!-- 这一列涉及TreeView控件的使用 -->
                    <Grid Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="120"/>
                            <RowDefinition Height="150"/>
                        </Grid.RowDefinitions>

                        <!-- 通过组合模式实现的树形结构 -->
                        <ScrollViewer Grid.Row="0">
                            <StackPanel>
                                <Label>一个树形结构的类型容器，关联放入Treeview当中</Label>
                                <TreeView x:Name="tv_composite">
                                    <TreeView.ItemTemplate>
                                        <HierarchicalDataTemplate DataType="{x:Type model:TreeViewComposite}" ItemsSource="{Binding m_SubList}" >
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock VerticalAlignment="Center" Text="{Binding m_ItemName}"></TextBlock>
                                            </StackPanel>
                                        </HierarchicalDataTemplate>
                                    </TreeView.ItemTemplate>
                                </TreeView>
                            </StackPanel>
                        </ScrollViewer>

                        <!-- 简单的通过读取Resourcees中的静态XML格式的树形结构 -->
                        <ScrollViewer Grid.Row="1">
                            <StackPanel>
                                <Label>静态XML数据，放入Treeview当中</Label>
                                <TreeView ItemsSource="{Binding Source={StaticResource xdp}}">
                                    <TreeView.ItemTemplate>
                                        <HierarchicalDataTemplate ItemsSource="{Binding XPath=Folder}">
                                            <TextBlock Text="{Binding XPath=@Name}"/>
                                        </HierarchicalDataTemplate>
                                    </TreeView.ItemTemplate>
                                </TreeView>
                            </StackPanel>
                        </ScrollViewer>

                        <Button Content="Start Parse" Click="StartParseXML" Grid.Row="2" Margin="0,10"></Button>

                        <!-- 通过读取XML文件来填写属性结构的模板 -->
                        <ScrollViewer Grid.Row="3">
                            <TreeView x:Name="TreeViewReadFromXMLFile">
                                <TreeView.ItemTemplate>
                                    <HierarchicalDataTemplate DataType="{x:Type model:TreeViewComposite}" ItemsSource="{Binding m_SubList}">
                                        <StackPanel>
                                            <TextBlock Text="{Binding m_ItemName}"></TextBlock>
                                        </StackPanel>
                                    </HierarchicalDataTemplate>
                                </TreeView.ItemTemplate>
                            </TreeView>
                        </ScrollViewer>



                    </Grid>
                </Grid>
            </TabItem>


            <TabItem Header="小实验">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="0">
                        <StackPanel>
                            <Button Content="触发接口IEnumerable的实验程序" Click="TryEnumerable"></Button>

                        </StackPanel>
                    </Grid>
                </Grid>
            </TabItem>
        </TabControl>


    </Grid>
</Window>
